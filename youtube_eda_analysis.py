# -*- coding: utf-8 -*-
"""Youtube_EDA_Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gCPGV4BI6A1IQSJJs9VwldUv0T_hPyfN
"""

import pandas as pd

data=pd.read_csv('/content/Most popular 1000 Youtube videos - Copy(prac).csv')

data.head()

data.isnull().sum()       #checking for null values

data['Dislikes']=pd.to_numeric(data['Dislikes'],errors='coerce')  # converting data type
data['Dislikes'].fillna(data['Dislikes'].mean(),inplace=True)     # replacing all null values with the mean data of that column

data.isnull().sum()    #checking null values

data['rank'].dtypes

data['Video'].dtypes

data['Video'].dtypes

data['Category'].head(10)

data['Category'].dtypes

data=data.dropna(subset=['Category'])   #remove rows where category column has missing values

data['Category'].head(10)

len(data)

data.isnull().sum()

data.duplicated().sum()

data.dtypes

data['Dislikes']=data['Dislikes'].astype(int)      #astype(dataType): used to convert data type

data.dtypes

data.describe()

data.head()

years=data['published'].unique()
print(years)

data_backup=data.copy()    #creating backup of original data
print(len(data))

df = pd.DataFrame(published_songs_by_year)

print(df)

import matplotlib.pyplot as plt

plt.figure(figsize=(15, 6))
bars = plt.bar(df['published'], df['Video'], color='skyblue', edgecolor='black')
plt.title('Song Publications by Year', fontsize=14)
plt.xlabel('published', fontsize=12)
plt.ylabel('Number of Songs', fontsize=12)
plt.xticks(rotation=45, ha='right')
plt.grid(axis='y', linestyle='--', alpha=0.7)

# Add value labels
for bar in bars:
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2., height,
             f'{int(height)}', ha='center', va='bottom')

plt.tight_layout()
plt.show()

top5 = df.nlargest(5, 'Video')
plt.pie(top5['Video'], labels=top5['published'], autopct='%1.1f%%',
        explode=[0.1]*5, shadow=True)
plt.title('Top 5 Years by Song Publications')

data.head()

data[['rank','Video']].tail()

len(data)